// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v5.29.0
// source: forge.proto

package subgraph

import (
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CreateSubgraphRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Protocol        string `protobuf:"bytes,1,opt,name=protocol,proto3" json:"protocol,omitempty"`
	Network         string `protobuf:"bytes,2,opt,name=network,proto3" json:"network,omitempty"`
	ContractAddress string `protobuf:"bytes,3,opt,name=contractAddress,proto3" json:"contractAddress,omitempty"`
}

func (x *CreateSubgraphRequest) Reset() {
	*x = CreateSubgraphRequest{}
	mi := &file_forge_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateSubgraphRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSubgraphRequest) ProtoMessage() {}

func (x *CreateSubgraphRequest) ProtoReflect() protoreflect.Message {
	mi := &file_forge_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSubgraphRequest.ProtoReflect.Descriptor instead.
func (*CreateSubgraphRequest) Descriptor() ([]byte, []int) {
	return file_forge_proto_rawDescGZIP(), []int{0}
}

func (x *CreateSubgraphRequest) GetProtocol() string {
	if x != nil {
		return x.Protocol
	}
	return ""
}

func (x *CreateSubgraphRequest) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

func (x *CreateSubgraphRequest) GetContractAddress() string {
	if x != nil {
		return x.ContractAddress
	}
	return ""
}

type CreateSubgraphResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubgraphId string `protobuf:"bytes,1,opt,name=subgraphId,proto3" json:"subgraphId,omitempty"`
}

func (x *CreateSubgraphResponse) Reset() {
	*x = CreateSubgraphResponse{}
	mi := &file_forge_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateSubgraphResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSubgraphResponse) ProtoMessage() {}

func (x *CreateSubgraphResponse) ProtoReflect() protoreflect.Message {
	mi := &file_forge_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSubgraphResponse.ProtoReflect.Descriptor instead.
func (*CreateSubgraphResponse) Descriptor() ([]byte, []int) {
	return file_forge_proto_rawDescGZIP(), []int{1}
}

func (x *CreateSubgraphResponse) GetSubgraphId() string {
	if x != nil {
		return x.SubgraphId
	}
	return ""
}

type DeleteSubgraphRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Protocol        string `protobuf:"bytes,1,opt,name=protocol,proto3" json:"protocol,omitempty"`
	Network         string `protobuf:"bytes,2,opt,name=network,proto3" json:"network,omitempty"`
	ContractAddress string `protobuf:"bytes,3,opt,name=contractAddress,proto3" json:"contractAddress,omitempty"`
}

func (x *DeleteSubgraphRequest) Reset() {
	*x = DeleteSubgraphRequest{}
	mi := &file_forge_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteSubgraphRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSubgraphRequest) ProtoMessage() {}

func (x *DeleteSubgraphRequest) ProtoReflect() protoreflect.Message {
	mi := &file_forge_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSubgraphRequest.ProtoReflect.Descriptor instead.
func (*DeleteSubgraphRequest) Descriptor() ([]byte, []int) {
	return file_forge_proto_rawDescGZIP(), []int{2}
}

func (x *DeleteSubgraphRequest) GetProtocol() string {
	if x != nil {
		return x.Protocol
	}
	return ""
}

func (x *DeleteSubgraphRequest) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

func (x *DeleteSubgraphRequest) GetContractAddress() string {
	if x != nil {
		return x.ContractAddress
	}
	return ""
}

type CreateSubgraphBatchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subgraphs []*SubgraphInfo `protobuf:"bytes,1,rep,name=subgraphs,proto3" json:"subgraphs,omitempty"`
}

func (x *CreateSubgraphBatchRequest) Reset() {
	*x = CreateSubgraphBatchRequest{}
	mi := &file_forge_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateSubgraphBatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSubgraphBatchRequest) ProtoMessage() {}

func (x *CreateSubgraphBatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_forge_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSubgraphBatchRequest.ProtoReflect.Descriptor instead.
func (*CreateSubgraphBatchRequest) Descriptor() ([]byte, []int) {
	return file_forge_proto_rawDescGZIP(), []int{3}
}

func (x *CreateSubgraphBatchRequest) GetSubgraphs() []*SubgraphInfo {
	if x != nil {
		return x.Subgraphs
	}
	return nil
}

type SubgraphInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Protocol        string `protobuf:"bytes,1,opt,name=protocol,proto3" json:"protocol,omitempty"`
	Network         string `protobuf:"bytes,2,opt,name=network,proto3" json:"network,omitempty"`
	ContractAddress string `protobuf:"bytes,3,opt,name=contractAddress,proto3" json:"contractAddress,omitempty"`
}

func (x *SubgraphInfo) Reset() {
	*x = SubgraphInfo{}
	mi := &file_forge_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubgraphInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubgraphInfo) ProtoMessage() {}

func (x *SubgraphInfo) ProtoReflect() protoreflect.Message {
	mi := &file_forge_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubgraphInfo.ProtoReflect.Descriptor instead.
func (*SubgraphInfo) Descriptor() ([]byte, []int) {
	return file_forge_proto_rawDescGZIP(), []int{4}
}

func (x *SubgraphInfo) GetProtocol() string {
	if x != nil {
		return x.Protocol
	}
	return ""
}

func (x *SubgraphInfo) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

func (x *SubgraphInfo) GetContractAddress() string {
	if x != nil {
		return x.ContractAddress
	}
	return ""
}

type CreateSubgraphBatchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubgraphIds []string `protobuf:"bytes,1,rep,name=subgraphIds,proto3" json:"subgraphIds,omitempty"`
}

func (x *CreateSubgraphBatchResponse) Reset() {
	*x = CreateSubgraphBatchResponse{}
	mi := &file_forge_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateSubgraphBatchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSubgraphBatchResponse) ProtoMessage() {}

func (x *CreateSubgraphBatchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_forge_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSubgraphBatchResponse.ProtoReflect.Descriptor instead.
func (*CreateSubgraphBatchResponse) Descriptor() ([]byte, []int) {
	return file_forge_proto_rawDescGZIP(), []int{5}
}

func (x *CreateSubgraphBatchResponse) GetSubgraphIds() []string {
	if x != nil {
		return x.SubgraphIds
	}
	return nil
}

var File_forge_proto protoreflect.FileDescriptor

var file_forge_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x66, 0x6f, 0x72, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x21, 0x64, 0x65, 0x70, 0x73, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x33, 0x64, 0x65, 0x70, 0x73, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69,
	0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d,
	0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa3, 0x03, 0x0a, 0x15, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x67, 0x72, 0x61, 0x70, 0x68, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x4e, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x32, 0x92, 0x41, 0x2f, 0x32, 0x2d, 0xd0, 0x9f, 0xd1, 0x80,
	0xd0, 0xbe, 0xd1, 0x82, 0xd0, 0xbe, 0xd0, 0xba, 0xd0, 0xbe, 0xd0, 0xbb, 0x20, 0x28, 0xd0, 0xbd,
	0xd0, 0xb0, 0xd0, 0xbf, 0xd1, 0x80, 0xd0, 0xb8, 0xd0, 0xbc, 0xd0, 0xb5, 0xd1, 0x80, 0x2c, 0x20,
	0x45, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x29, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x12, 0x4c, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x32, 0x92, 0x41, 0x2f, 0x32, 0x2d, 0xd0, 0xa1, 0xd0, 0xb5, 0xd1,
	0x82, 0xd1, 0x8c, 0x20, 0x28, 0xd0, 0xbd, 0xd0, 0xb0, 0xd0, 0xbf, 0xd1, 0x80, 0xd0, 0xb8, 0xd0,
	0xbc, 0xd0, 0xb5, 0xd1, 0x80, 0x2c, 0x20, 0x4d, 0x61, 0x69, 0x6e, 0x6e, 0x65, 0x74, 0x2c, 0x20,
	0x52, 0x69, 0x6e, 0x6b, 0x65, 0x62, 0x79, 0x29, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x12, 0x4c, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x22, 0x92, 0x41, 0x1f, 0x32,
	0x1d, 0xd0, 0x90, 0xd0, 0xb4, 0xd1, 0x80, 0xd0, 0xb5, 0xd1, 0x81, 0x20, 0xd0, 0xba, 0xd0, 0xbe,
	0xd0, 0xbd, 0xd1, 0x82, 0xd1, 0x80, 0xd0, 0xb0, 0xd0, 0xba, 0xd1, 0x82, 0xd0, 0xb0, 0x52, 0x0f,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x3a,
	0x9d, 0x01, 0x92, 0x41, 0x99, 0x01, 0x0a, 0x3e, 0x2a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x53, 0x75, 0x62, 0x67, 0x72, 0x61, 0x70, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0xd2,
	0x01, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0xd2, 0x01, 0x07, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0xd2, 0x01, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x32, 0x57, 0x7b, 0x22, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x22, 0x3a, 0x20, 0x22, 0x45, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x22, 0x2c,
	0x20, 0x22, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x22, 0x3a, 0x20, 0x22, 0x4d, 0x61, 0x69,
	0x6e, 0x6e, 0x65, 0x74, 0x22, 0x2c, 0x20, 0x22, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x3a, 0x20, 0x22, 0x30, 0x78, 0x31, 0x32, 0x33,
	0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x30, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x22, 0x7d, 0x22,
	0xbc, 0x01, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x67, 0x72, 0x61,
	0x70, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x0a, 0x73, 0x75,
	0x62, 0x67, 0x72, 0x61, 0x70, 0x68, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2d,
	0x92, 0x41, 0x2a, 0x32, 0x28, 0x49, 0x44, 0x20, 0xd1, 0x81, 0xd0, 0xbe, 0xd0, 0xb7, 0xd0, 0xb4,
	0xd0, 0xb0, 0xd0, 0xbd, 0xd0, 0xbd, 0xd0, 0xbe, 0xd0, 0xb3, 0xd0, 0xbe, 0x20, 0xd1, 0x81, 0xd0,
	0xb0, 0xd0, 0xb1, 0xd0, 0xb3, 0xd1, 0x80, 0xd0, 0xb0, 0xd1, 0x84, 0xd0, 0xb0, 0x52, 0x0a, 0x73,
	0x75, 0x62, 0x67, 0x72, 0x61, 0x70, 0x68, 0x49, 0x64, 0x3a, 0x53, 0x92, 0x41, 0x50, 0x0a, 0x25,
	0x2a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x67, 0x72, 0x61, 0x70, 0x68,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0xd2, 0x01, 0x0a, 0x73, 0x75, 0x62, 0x67, 0x72,
	0x61, 0x70, 0x68, 0x49, 0x64, 0x32, 0x27, 0x7b, 0x22, 0x73, 0x75, 0x62, 0x67, 0x72, 0x61, 0x70,
	0x68, 0x49, 0x64, 0x22, 0x3a, 0x20, 0x22, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64,
	0x2d, 0x73, 0x75, 0x62, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2d, 0x69, 0x64, 0x22, 0x7d, 0x22, 0xa3,
	0x03, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x75, 0x62, 0x67, 0x72, 0x61, 0x70,
	0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4e, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x32, 0x92, 0x41, 0x2f, 0x32,
	0x2d, 0xd0, 0x9f, 0xd1, 0x80, 0xd0, 0xbe, 0xd1, 0x82, 0xd0, 0xbe, 0xd0, 0xba, 0xd0, 0xbe, 0xd0,
	0xbb, 0x20, 0x28, 0xd0, 0xbd, 0xd0, 0xb0, 0xd0, 0xbf, 0xd1, 0x80, 0xd0, 0xb8, 0xd0, 0xbc, 0xd0,
	0xb5, 0xd1, 0x80, 0x2c, 0x20, 0x45, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x29, 0x52, 0x08,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x4c, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x32, 0x92, 0x41, 0x2f, 0x32, 0x2d,
	0xd0, 0xa1, 0xd0, 0xb5, 0xd1, 0x82, 0xd1, 0x8c, 0x20, 0x28, 0xd0, 0xbd, 0xd0, 0xb0, 0xd0, 0xbf,
	0xd1, 0x80, 0xd0, 0xb8, 0xd0, 0xbc, 0xd0, 0xb5, 0xd1, 0x80, 0x2c, 0x20, 0x4d, 0x61, 0x69, 0x6e,
	0x6e, 0x65, 0x74, 0x2c, 0x20, 0x52, 0x69, 0x6e, 0x6b, 0x65, 0x62, 0x79, 0x29, 0x52, 0x07, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x4c, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x22, 0x92, 0x41, 0x1f, 0x32, 0x1d, 0xd0, 0x90, 0xd0, 0xb4, 0xd1, 0x80, 0xd0, 0xb5, 0xd1, 0x81,
	0x20, 0xd0, 0xba, 0xd0, 0xbe, 0xd0, 0xbd, 0xd1, 0x82, 0xd1, 0x80, 0xd0, 0xb0, 0xd0, 0xba, 0xd1,
	0x82, 0xd0, 0xb0, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x3a, 0x9d, 0x01, 0x92, 0x41, 0x99, 0x01, 0x0a, 0x3e, 0x2a, 0x15, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x75, 0x62, 0x67, 0x72, 0x61, 0x70, 0x68, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0xd2, 0x01, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0xd2,
	0x01, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0xd2, 0x01, 0x0f, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x32, 0x57, 0x7b, 0x22, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x22, 0x3a, 0x20, 0x22, 0x45, 0x74, 0x68, 0x65, 0x72,
	0x65, 0x75, 0x6d, 0x22, 0x2c, 0x20, 0x22, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x22, 0x3a,
	0x20, 0x22, 0x4d, 0x61, 0x69, 0x6e, 0x6e, 0x65, 0x74, 0x22, 0x2c, 0x20, 0x22, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x3a, 0x20, 0x22,
	0x30, 0x78, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x30, 0x61, 0x62, 0x63, 0x64,
	0x65, 0x66, 0x22, 0x7d, 0x22, 0x82, 0x03, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53,
	0x75, 0x62, 0x67, 0x72, 0x61, 0x70, 0x68, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x6f, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x67, 0x72, 0x61, 0x70, 0x68, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x75, 0x62, 0x67, 0x72, 0x61, 0x70, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x3c, 0x92, 0x41, 0x39,
	0x32, 0x37, 0xd0, 0xa1, 0xd0, 0xbf, 0xd0, 0xb8, 0xd1, 0x81, 0xd0, 0xbe, 0xd0, 0xba, 0x20, 0xd1,
	0x81, 0xd0, 0xb0, 0xd0, 0xb1, 0xd0, 0xb3, 0xd1, 0x80, 0xd0, 0xb0, 0xd1, 0x84, 0xd0, 0xbe, 0xd0,
	0xb2, 0x20, 0xd0, 0xb4, 0xd0, 0xbb, 0xd1, 0x8f, 0x20, 0xd1, 0x81, 0xd0, 0xbe, 0xd0, 0xb7, 0xd0,
	0xb4, 0xd0, 0xb0, 0xd0, 0xbd, 0xd0, 0xb8, 0xd1, 0x8f, 0x52, 0x09, 0x73, 0x75, 0x62, 0x67, 0x72,
	0x61, 0x70, 0x68, 0x73, 0x3a, 0xf2, 0x01, 0x92, 0x41, 0xee, 0x01, 0x0a, 0x28, 0x2a, 0x1a, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x67, 0x72, 0x61, 0x70, 0x68, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0xd2, 0x01, 0x09, 0x73, 0x75, 0x62, 0x67,
	0x72, 0x61, 0x70, 0x68, 0x73, 0x32, 0xc1, 0x01, 0x7b, 0x22, 0x73, 0x75, 0x62, 0x67, 0x72, 0x61,
	0x70, 0x68, 0x73, 0x22, 0x3a, 0x20, 0x5b, 0x7b, 0x22, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x22, 0x3a, 0x20, 0x22, 0x45, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x22, 0x2c, 0x20,
	0x22, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x22, 0x3a, 0x20, 0x22, 0x4d, 0x61, 0x69, 0x6e,
	0x6e, 0x65, 0x74, 0x22, 0x2c, 0x20, 0x22, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x3a, 0x20, 0x22, 0x30, 0x78, 0x31, 0x32, 0x33, 0x34,
	0x35, 0x36, 0x37, 0x38, 0x39, 0x30, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x22, 0x7d, 0x2c, 0x20,
	0x7b, 0x22, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x22, 0x3a, 0x20, 0x22, 0x45, 0x74,
	0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x22, 0x2c, 0x20, 0x22, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x22, 0x3a, 0x20, 0x22, 0x52, 0x69, 0x6e, 0x6b, 0x65, 0x62, 0x79, 0x22, 0x2c, 0x20, 0x22,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22,
	0x3a, 0x20, 0x22, 0x30, 0x78, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x31, 0x32, 0x33, 0x34, 0x35,
	0x36, 0x37, 0x38, 0x39, 0x30, 0x22, 0x7d, 0x5d, 0x7d, 0x22, 0x91, 0x03, 0x0a, 0x0c, 0x53, 0x75,
	0x62, 0x67, 0x72, 0x61, 0x70, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4e, 0x0a, 0x08, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x32, 0x92, 0x41,
	0x2f, 0x32, 0x2d, 0xd0, 0x9f, 0xd1, 0x80, 0xd0, 0xbe, 0xd1, 0x82, 0xd0, 0xbe, 0xd0, 0xba, 0xd0,
	0xbe, 0xd0, 0xbb, 0x20, 0x28, 0xd0, 0xbd, 0xd0, 0xb0, 0xd0, 0xbf, 0xd1, 0x80, 0xd0, 0xb8, 0xd0,
	0xbc, 0xd0, 0xb5, 0xd1, 0x80, 0x2c, 0x20, 0x45, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x29,
	0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x4c, 0x0a, 0x07, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x32, 0x92, 0x41, 0x2f,
	0x32, 0x2d, 0xd0, 0xa1, 0xd0, 0xb5, 0xd1, 0x82, 0xd1, 0x8c, 0x20, 0x28, 0xd0, 0xbd, 0xd0, 0xb0,
	0xd0, 0xbf, 0xd1, 0x80, 0xd0, 0xb8, 0xd0, 0xbc, 0xd0, 0xb5, 0xd1, 0x80, 0x2c, 0x20, 0x4d, 0x61,
	0x69, 0x6e, 0x6e, 0x65, 0x74, 0x2c, 0x20, 0x52, 0x69, 0x6e, 0x6b, 0x65, 0x62, 0x79, 0x29, 0x52,
	0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x4c, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x22, 0x92, 0x41, 0x1f, 0x32, 0x1d, 0xd0, 0x90, 0xd0, 0xb4, 0xd1, 0x80, 0xd0, 0xb5,
	0xd1, 0x81, 0x20, 0xd0, 0xba, 0xd0, 0xbe, 0xd0, 0xbd, 0xd1, 0x82, 0xd1, 0x80, 0xd0, 0xb0, 0xd0,
	0xba, 0xd1, 0x82, 0xd0, 0xb0, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x3a, 0x94, 0x01, 0x92, 0x41, 0x90, 0x01, 0x0a, 0x35, 0x2a,
	0x0c, 0x53, 0x75, 0x62, 0x67, 0x72, 0x61, 0x70, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0xd2, 0x01, 0x08,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0xd2, 0x01, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0xd2, 0x01, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x32, 0x57, 0x7b, 0x22, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x22, 0x3a, 0x20, 0x22, 0x45, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x22, 0x2c, 0x20, 0x22,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x22, 0x3a, 0x20, 0x22, 0x4d, 0x61, 0x69, 0x6e, 0x6e,
	0x65, 0x74, 0x22, 0x2c, 0x20, 0x22, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x3a, 0x20, 0x22, 0x30, 0x78, 0x31, 0x32, 0x33, 0x34, 0x35,
	0x36, 0x37, 0x38, 0x39, 0x30, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x22, 0x7d, 0x22, 0xee, 0x01,
	0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x67, 0x72, 0x61, 0x70, 0x68,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5c, 0x0a,
	0x0b, 0x73, 0x75, 0x62, 0x67, 0x72, 0x61, 0x70, 0x68, 0x49, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x42, 0x3a, 0x92, 0x41, 0x37, 0x32, 0x35, 0xd0, 0xa1, 0xd0, 0xbf, 0xd0, 0xb8, 0xd1,
	0x81, 0xd0, 0xbe, 0xd0, 0xba, 0x20, 0x49, 0x44, 0x20, 0xd1, 0x81, 0xd0, 0xbe, 0xd0, 0xb7, 0xd0,
	0xb4, 0xd0, 0xb0, 0xd0, 0xbd, 0xd0, 0xbd, 0xd1, 0x8b, 0xd1, 0x85, 0x20, 0xd1, 0x81, 0xd0, 0xb0,
	0xd0, 0xb1, 0xd0, 0xb3, 0xd1, 0x80, 0xd0, 0xb0, 0xd1, 0x84, 0xd0, 0xbe, 0xd0, 0xb2, 0x52, 0x0b,
	0x73, 0x75, 0x62, 0x67, 0x72, 0x61, 0x70, 0x68, 0x49, 0x64, 0x73, 0x3a, 0x71, 0x92, 0x41, 0x6e,
	0x0a, 0x2b, 0x2a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x67, 0x72, 0x61,
	0x70, 0x68, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0xd2,
	0x01, 0x0b, 0x73, 0x75, 0x62, 0x67, 0x72, 0x61, 0x70, 0x68, 0x49, 0x64, 0x73, 0x32, 0x3f, 0x7b,
	0x22, 0x73, 0x75, 0x62, 0x67, 0x72, 0x61, 0x70, 0x68, 0x49, 0x64, 0x73, 0x22, 0x3a, 0x20, 0x5b,
	0x22, 0x62, 0x61, 0x74, 0x63, 0x68, 0x2d, 0x73, 0x75, 0x62, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2d,
	0x69, 0x64, 0x2d, 0x31, 0x22, 0x2c, 0x20, 0x22, 0x62, 0x61, 0x74, 0x63, 0x68, 0x2d, 0x73, 0x75,
	0x62, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2d, 0x69, 0x64, 0x2d, 0x32, 0x22, 0x5d, 0x7d, 0x32, 0xd4,
	0x04, 0x0a, 0x0f, 0x53, 0x75, 0x62, 0x67, 0x72, 0x61, 0x70, 0x68, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0xcb, 0x01, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62,
	0x67, 0x72, 0x61, 0x70, 0x68, 0x12, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x67, 0x72, 0x61, 0x70, 0x68, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x53, 0x75, 0x62, 0x67, 0x72, 0x61, 0x70, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x7c, 0x92, 0x41, 0x5e, 0x1a, 0x5c, 0xd0, 0xa1, 0xd0, 0xbe, 0xd0, 0xb7, 0xd0,
	0xb4, 0xd0, 0xb0, 0xd0, 0xb5, 0xd1, 0x82, 0x20, 0xd0, 0xbd, 0xd0, 0xbe, 0xd0, 0xb2, 0xd1, 0x8b,
	0xd0, 0xb9, 0x20, 0xd1, 0x81, 0xd0, 0xb0, 0xd0, 0xb1, 0xd0, 0xb3, 0xd1, 0x80, 0xd0, 0xb0, 0xd1,
	0x84, 0x20, 0xd0, 0xbd, 0xd0, 0xb0, 0x20, 0xd0, 0xbe, 0xd1, 0x81, 0xd0, 0xbd, 0xd0, 0xbe, 0xd0,
	0xb2, 0xd0, 0xb5, 0x20, 0xd0, 0xbf, 0xd0, 0xb5, 0xd1, 0x80, 0xd0, 0xb5, 0xd0, 0xb4, 0xd0, 0xb0,
	0xd0, 0xbd, 0xd0, 0xbd, 0xd1, 0x8b, 0xd1, 0x85, 0x20, 0xd0, 0xb4, 0xd0, 0xb0, 0xd0, 0xbd, 0xd0,
	0xbd, 0xd1, 0x8b, 0xd1, 0x85, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x3a, 0x01, 0x2a, 0x22, 0x10,
	0x2f, 0x73, 0x75, 0x62, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x12, 0x9e, 0x01, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x75, 0x62, 0x67, 0x72,
	0x61, 0x70, 0x68, 0x12, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x53, 0x75, 0x62, 0x67, 0x72, 0x61, 0x70, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x56, 0x92, 0x41, 0x38, 0x1a, 0x36,
	0xd0, 0xa3, 0xd0, 0xb4, 0xd0, 0xb0, 0xd0, 0xbb, 0xd1, 0x8f, 0xd0, 0xb5, 0xd1, 0x82, 0x20, 0xd1,
	0x81, 0xd1, 0x83, 0xd1, 0x89, 0xd0, 0xb5, 0xd1, 0x81, 0xd1, 0x82, 0xd0, 0xb2, 0xd1, 0x83, 0xd1,
	0x8e, 0xd1, 0x89, 0xd0, 0xb8, 0xd0, 0xb9, 0x20, 0xd1, 0x81, 0xd0, 0xb0, 0xd0, 0xb1, 0xd0, 0xb3,
	0xd1, 0x80, 0xd0, 0xb0, 0xd1, 0x84, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x3a, 0x01, 0x2a, 0x22,
	0x10, 0x2f, 0x73, 0x75, 0x62, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x12, 0xd1, 0x01, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x67,
	0x72, 0x61, 0x70, 0x68, 0x42, 0x61, 0x74, 0x63, 0x68, 0x12, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x67, 0x72, 0x61, 0x70, 0x68,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x67, 0x72,
	0x61, 0x70, 0x68, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x73, 0x92, 0x41, 0x4f, 0x1a, 0x4d, 0xd0, 0xa1, 0xd0, 0xbe, 0xd0, 0xb7, 0xd0, 0xb4, 0xd0,
	0xb0, 0xd0, 0xb5, 0xd1, 0x82, 0x20, 0xd0, 0xbd, 0xd0, 0xb5, 0xd1, 0x81, 0xd0, 0xba, 0xd0, 0xbe,
	0xd0, 0xbb, 0xd1, 0x8c, 0xd0, 0xba, 0xd0, 0xbe, 0x20, 0xd1, 0x81, 0xd0, 0xb0, 0xd0, 0xb1, 0xd0,
	0xb3, 0xd1, 0x80, 0xd0, 0xb0, 0xd1, 0x84, 0xd0, 0xbe, 0xd0, 0xb2, 0x20, 0xd0, 0xb7, 0xd0, 0xb0,
	0x20, 0xd0, 0xbe, 0xd0, 0xb4, 0xd0, 0xb8, 0xd0, 0xbd, 0x20, 0xd0, 0xb2, 0xd1, 0x8b, 0xd0, 0xb7,
	0xd0, 0xbe, 0xd0, 0xb2, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x3a, 0x01, 0x2a, 0x22, 0x16, 0x2f,
	0x73, 0x75, 0x62, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f,
	0x62, 0x61, 0x74, 0x63, 0x68, 0x42, 0x21, 0x5a, 0x1f, 0x77, 0x65, 0x62, 0x33, 0x63, 0x6f, 0x72,
	0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x77, 0x65, 0x62, 0x33, 0x2f,
	0x73, 0x75, 0x62, 0x67, 0x72, 0x61, 0x70, 0x68, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_forge_proto_rawDescOnce sync.Once
	file_forge_proto_rawDescData = file_forge_proto_rawDesc
)

func file_forge_proto_rawDescGZIP() []byte {
	file_forge_proto_rawDescOnce.Do(func() {
		file_forge_proto_rawDescData = protoimpl.X.CompressGZIP(file_forge_proto_rawDescData)
	})
	return file_forge_proto_rawDescData
}

var file_forge_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_forge_proto_goTypes = []any{
	(*CreateSubgraphRequest)(nil),       // 0: proto.CreateSubgraphRequest
	(*CreateSubgraphResponse)(nil),      // 1: proto.CreateSubgraphResponse
	(*DeleteSubgraphRequest)(nil),       // 2: proto.DeleteSubgraphRequest
	(*CreateSubgraphBatchRequest)(nil),  // 3: proto.CreateSubgraphBatchRequest
	(*SubgraphInfo)(nil),                // 4: proto.SubgraphInfo
	(*CreateSubgraphBatchResponse)(nil), // 5: proto.CreateSubgraphBatchResponse
	(*emptypb.Empty)(nil),               // 6: google.protobuf.Empty
}
var file_forge_proto_depIdxs = []int32{
	4, // 0: proto.CreateSubgraphBatchRequest.subgraphs:type_name -> proto.SubgraphInfo
	0, // 1: proto.SubgraphService.CreateSubgraph:input_type -> proto.CreateSubgraphRequest
	2, // 2: proto.SubgraphService.DeleteSubgraph:input_type -> proto.DeleteSubgraphRequest
	3, // 3: proto.SubgraphService.CreateSubgraphBatch:input_type -> proto.CreateSubgraphBatchRequest
	1, // 4: proto.SubgraphService.CreateSubgraph:output_type -> proto.CreateSubgraphResponse
	6, // 5: proto.SubgraphService.DeleteSubgraph:output_type -> google.protobuf.Empty
	5, // 6: proto.SubgraphService.CreateSubgraphBatch:output_type -> proto.CreateSubgraphBatchResponse
	4, // [4:7] is the sub-list for method output_type
	1, // [1:4] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_forge_proto_init() }
func file_forge_proto_init() {
	if File_forge_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_forge_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_forge_proto_goTypes,
		DependencyIndexes: file_forge_proto_depIdxs,
		MessageInfos:      file_forge_proto_msgTypes,
	}.Build()
	File_forge_proto = out.File
	file_forge_proto_rawDesc = nil
	file_forge_proto_goTypes = nil
	file_forge_proto_depIdxs = nil
}
